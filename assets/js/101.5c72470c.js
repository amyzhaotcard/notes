(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{480:function(e,l,s){"use strict";s.r(l);var t=s(26),r=Object(t.a)({},(function(){var e=this,l=e.$createElement,s=e._self._c||l;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"如何提高-webpack-的构建速度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何提高-webpack-的构建速度"}},[e._v("#")]),e._v(" 如何提高 webpack 的构建速度")]),e._v(" "),s("p",[s("strong",[e._v("优化 webpack 构建的方式有很多，主要可以从优化搜索时间、缩小文件搜索范围、减少不必要的编译等方面入手")])]),e._v(" "),s("ul",[s("li",[e._v("优化 loader 配置: 可以通过配置 include、exclude、test 属性来匹配文件")]),e._v(" "),s("li",[e._v("合理使用 resolve.extensions： 通过 resolve.extensions 是解析到文件时自动添加拓展名，当我们引入文件的时候，若没有文件后缀名，则会根据数组内的值依次查找；当我们配置的时候，则不要随便把所有后缀都写在里面，这会调用多次文件的查找，这样就会减慢打包速度")]),e._v(" "),s("li",[e._v("优化 resolve.modules： 可以指明存放第三方模块的绝对路径，以减少寻找")]),e._v(" "),s("li",[e._v("优化 resolve.alias： 给一些常用的路径起一个别名，减少查找过程")]),e._v(" "),s("li",[e._v("使用 DLLPlugin 插件： 不经常改变的代码，抽成一个共享的库")]),e._v(" "),s("li",[e._v("使用 cache-loader： 缓存")]),e._v(" "),s("li",[e._v("terser 启动多线程： 使用多进程并行运行来提高构建速度")]),e._v(" "),s("li",[e._v("合理使用 sourceMap： 打包生成 sourceMap 的时候，如果信息越详细，打包速度就会越慢")])])])}),[],!1,null,null,null);l.default=r.exports}}]);