(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{454:function(e,a,t){"use strict";t.r(a);var v=t(26),s=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"keep-alive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[e._v("#")]),e._v(" keep-alive")]),e._v(" "),t("p",[e._v("keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。")]),e._v(" "),t("ul",[t("li",[e._v("include - 字符串或正则表达式，只有名称匹配的组件会被缓存")]),e._v(" "),t("li",[e._v("exclude - 字符串或正则表达式，任何名称匹配的组件都不会被缓存")]),e._v(" "),t("li",[e._v("max: 最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉。")])]),e._v(" "),t("h4",{attrs:{id:"生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),t("p",[e._v("activated（激活）、deacitvated（冻结）")]),e._v(" "),t("h4",{attrs:{id:"实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[e._v("#")]),e._v(" 实现原理")]),e._v(" "),t("ul",[t("li",[e._v("在它的函数钩子 created 阶段，定义了 caches 对象、keys 数组来缓存已经创建的 vnode")]),e._v(" "),t("li",[e._v("keep-alive 还有一个 render 函数，渲染的时候，计算一个 key，然后判断是否存在 cache 对象， 如果有就把缓存的 vnode 插入到 dom 树，没有就把 vnode 缓存到 caches 对象")])])])}),[],!1,null,null,null);a.default=s.exports}}]);