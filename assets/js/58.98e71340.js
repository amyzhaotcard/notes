(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{432:function(t,e,o){"use strict";o.r(e);var v=o(26),n=Object(v.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"var、let-及-const-区别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#var、let-及-const-区别"}},[t._v("#")]),t._v(" var、let 及 const 区别")]),t._v(" "),o("ul",[o("li",[o("p",[o("code",[t._v("var")]),t._v(" 存在变量提升，我们在声明之前可以使用。"),o("code",[t._v("let")]),t._v("、"),o("code",[t._v("const")]),t._v(" 因为存在暂时性死区的原因，不能在声明前使用")])]),t._v(" "),o("li",[o("p",[o("code",[t._v("var")]),t._v(" 在全局作用域下声明变量，会导致变量挂载在 "),o("code",[t._v("window")]),t._v(" 上，其他两者不会")])]),t._v(" "),o("li",[o("p",[o("code",[t._v("let")]),t._v(" 和 "),o("code",[t._v("const")]),t._v(" 作用基本一致，但是后者声明的变量不能再次赋值")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);