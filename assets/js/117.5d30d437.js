(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{498:function(e,t,r){"use strict";r.r(t);var n=r(26),v=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"地址栏输入-url-敲下回车后发生了什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#地址栏输入-url-敲下回车后发生了什么"}},[e._v("#")]),e._v(" 地址栏输入 URL 敲下回车后发生了什么")]),e._v(" "),r("ul",[r("li",[e._v("URL 解析")]),e._v(" "),r("li",[e._v("DNS 查询")]),e._v(" "),r("li",[e._v("TCP 连接")]),e._v(" "),r("li",[e._v("HTTP 请求")]),e._v(" "),r("li",[e._v("响应请求")]),e._v(" "),r("li",[e._v("页面渲染\n"),r("ul",[r("li",[e._v("解析 HTML，构建 DOM 树")]),e._v(" "),r("li",[e._v("解析 CSS ，生成 CSS 规则树")]),e._v(" "),r("li",[e._v("合并 DOM 树和 CSS 规则，生成 render 树")]),e._v(" "),r("li",[e._v("布局 render 树（ Layout / reflow ），负责各元素尺寸、位置的计算")]),e._v(" "),r("li",[e._v("绘制 render 树（ paint ），绘制页面像素信息")]),e._v(" "),r("li",[e._v("浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（ composite ），显示在屏幕上")])])])]),e._v(" "),r("h2",{attrs:{id:"template-编译成-render-函数过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#template-编译成-render-函数过程"}},[e._v("#")]),e._v(" template 编译成 render 函数过程")]),e._v(" "),r("p",[e._v("总的来说，在 beforeMount 之前执行编译过程，")]),e._v(" "),r("ul",[r("li",[e._v("第一步通过 html-parser 将 template 解析成 ast 抽象语法树")]),e._v(" "),r("li",[e._v("第二步通过 optimize 优化 ast 并标记静态节点和静态根节点")]),e._v(" "),r("li",[e._v("第三步通过 generate 将 ast 抽象语法树编译成 render 字符串并将静态部分放到 staticRenderFns 中")]),e._v(" "),r("li",[e._v("最后通过 new Function(render)生成 render 函数。")])]),e._v(" "),r("p",[e._v("在 beforeMount 和 mounted 之间执行 render 函数生成 VNode，然后通过 patch(VNode)生成 dom 树并挂载，调用 mounted。")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://vue3js.cn/interview/http/after_url.html#%E4%B8%80%E3%80%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"}},[e._v("说说地址栏输入 URL 敲下回车后发生了什么?"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=v.exports}}]);